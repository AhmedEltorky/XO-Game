package xo;

import javax.swing.JOptionPane;
import java.util.Random;

/**
 *
 * @author Ahmed El-Torky
 */
public class XOGame extends javax.swing.JFrame {

    /**
     * Creates new form XOGame
     */
    public XOGame() {
        initComponents();
        onePlayer.setSelected(true);
        easy.setSelected(true);
        this.setTitle("X-O Game");
        this.setResizable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        ButtonEight = new javax.swing.JButton();
        ButtonTwo = new javax.swing.JButton();
        ButtonThree = new javax.swing.JButton();
        ButtonSix = new javax.swing.JButton();
        ButtonFive = new javax.swing.JButton();
        twoPlayer = new javax.swing.JRadioButton();
        onePlayer = new javax.swing.JRadioButton();
        easy = new javax.swing.JRadioButton();
        hard = new javax.swing.JRadioButton();
        ButtonSeven = new javax.swing.JButton();
        ButtonFour = new javax.swing.JButton();
        ButtonOne = new javax.swing.JButton();
        ButtonReset = new javax.swing.JButton();
        ButtonNine = new javax.swing.JButton();
        turnLabel = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        ButtonEight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonEightActionPerformed(evt);
            }
        });

        ButtonTwo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonTwoActionPerformed(evt);
            }
        });

        ButtonThree.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonThreeActionPerformed(evt);
            }
        });

        ButtonSix.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonSixActionPerformed(evt);
            }
        });

        ButtonFive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonFiveActionPerformed(evt);
            }
        });

        buttonGroup1.add(twoPlayer);
        twoPlayer.setText("2 Player");
        twoPlayer.setToolTipText("select to activate two players mode");
        twoPlayer.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        twoPlayer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                twoPlayerActionPerformed(evt);
            }
        });

        buttonGroup1.add(onePlayer);
        onePlayer.setText("1 Player");
        onePlayer.setToolTipText("select to play against computer");
        onePlayer.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        onePlayer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onePlayerActionPerformed(evt);
            }
        });

        buttonGroup2.add(easy);
        easy.setToolTipText("Easy Mode");
        easy.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        easy.setLabel("Easy");
        easy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                easyActionPerformed(evt);
            }
        });

        buttonGroup2.add(hard);
        hard.setToolTipText("Hard Mode");
        hard.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        hard.setLabel("Hard");
        hard.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hardActionPerformed(evt);
            }
        });

        ButtonSeven.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonSevenActionPerformed(evt);
            }
        });

        ButtonFour.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonFourActionPerformed(evt);
            }
        });

        ButtonOne.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonOneActionPerformed(evt);
            }
        });

        ButtonReset.setText("Reset Game");
        ButtonReset.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        ButtonReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonResetActionPerformed(evt);
            }
        });

        ButtonNine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonNineActionPerformed(evt);
            }
        });

        turnLabel.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        turnLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        turnLabel.setLabelFor(twoPlayer);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ButtonSeven, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ButtonFour, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ButtonOne, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(ButtonEight, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ButtonFive, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ButtonTwo, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(21, 21, 21))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(ButtonReset, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(29, 29, 29)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(onePlayer)
                            .addComponent(twoPlayer))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addComponent(easy)
                            .addComponent(hard))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ButtonNine, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ButtonSix, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ButtonThree, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(13, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(261, 261, 261)
                .addComponent(turnLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(13, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {ButtonEight, ButtonFive, ButtonFour, ButtonNine, ButtonOne, ButtonSeven, ButtonSix, ButtonThree, ButtonTwo, turnLabel});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ButtonNine, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ButtonEight, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ButtonSeven, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(ButtonFive, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ButtonFour, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ButtonSix, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(ButtonTwo, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ButtonOne, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ButtonThree, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(onePlayer)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(twoPlayer))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(easy)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(hard)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(turnLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(292, Short.MAX_VALUE)
                .addComponent(ButtonReset, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(11, 11, 11))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {ButtonEight, ButtonFive, ButtonFour, ButtonNine, ButtonOne, ButtonSeven, ButtonSix, ButtonThree, ButtonTwo});

        ButtonSeven.getAccessibleContext().setAccessibleParent(jPanel1);
        ButtonFour.getAccessibleContext().setAccessibleParent(jPanel1);
        ButtonOne.getAccessibleContext().setAccessibleParent(jPanel1);
        ButtonReset.getAccessibleContext().setAccessibleParent(jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(23, 23, 23))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ButtonNineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonNineActionPerformed
        if ("".equals(ButtonNine.getText())) {
            if ("X".equals(check)) {
                ButtonNine.setText("X");
                check = "O";
                arr[0][2] = 1;
                counter++;
                this.result();
                if (onePlayer.isSelected() && easy.isSelected()) {
                    this.computerTurn();
                } else if (onePlayer.isSelected() && hard.isSelected()) {
                    this.computerTurnHard();
                }
            } else {
                ButtonNine.setText("O");
                check = "X";
                arr[0][2] = 0;
                counter++;
                this.result();
            }
        }
    }//GEN-LAST:event_ButtonNineActionPerformed

    private void ButtonResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonResetActionPerformed
        this.reset();
        check = start = "X";
    }//GEN-LAST:event_ButtonResetActionPerformed

    private void ButtonOneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonOneActionPerformed
        if ("".equals(ButtonOne.getText())) {
            if ("X".equals(check)) {
                ButtonOne.setText("X");
                check = "O";
                arr[2][0] = 1;
                counter++;
                this.result();
                if (onePlayer.isSelected() && easy.isSelected()) {
                    this.computerTurn();
                } else if (onePlayer.isSelected() && hard.isSelected()) {
                    this.computerTurnHard();
                }
            } else {
                ButtonOne.setText("O");
                check = "X";
                arr[2][0] = 0;
                counter++;
                this.result();
            }
        }
    }//GEN-LAST:event_ButtonOneActionPerformed

    private void ButtonFourActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonFourActionPerformed
        if ("".equals(ButtonFour.getText())) {
            if ("X".equals(check)) {
                ButtonFour.setText("X");
                check = "O";
                arr[1][0] = 1;
                counter++;
                this.result();
                if (onePlayer.isSelected() && easy.isSelected()) {
                    this.computerTurn();
                } else if (onePlayer.isSelected() && hard.isSelected()) {
                    this.computerTurnHard();
                }
            } else {
                ButtonFour.setText("O");
                check = "X";
                arr[1][0] = 0;
                counter++;
                this.result();
            }
        }
    }//GEN-LAST:event_ButtonFourActionPerformed

    private void ButtonSevenActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonSevenActionPerformed
        if ("".equals(ButtonSeven.getText())) {
            if ("X".equals(check)) {
                ButtonSeven.setText("X");
                check = "O";
                arr[0][0] = 1;
                counter++;
                this.result();
                if (onePlayer.isSelected() && easy.isSelected()) {
                    this.computerTurn();
                } else if (onePlayer.isSelected() && hard.isSelected()) {
                    this.computerTurnHard();
                }
            } else {
                ButtonSeven.setText("O");
                check = "X";
                arr[0][0] = 0;
                counter++;
                this.result();
            }
        }
    }//GEN-LAST:event_ButtonSevenActionPerformed

    private void hardActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hardActionPerformed
        // TODO add your handling code here:
        this.reset();
    }//GEN-LAST:event_hardActionPerformed

    private void easyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_easyActionPerformed
        // TODO add your handling code here:
        this.reset();
    }//GEN-LAST:event_easyActionPerformed

    private void onePlayerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_onePlayerActionPerformed
        // TODO add your handling code here:
        this.reset();
    }//GEN-LAST:event_onePlayerActionPerformed

    private void twoPlayerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_twoPlayerActionPerformed
        // TODO add your handling code here:
        this.reset();
        //        if ("X".equals(check)) {
            //            turnLabel.setForeground(Color.red);
            //            turnLabel.setText("X - Turn");
            //        } else {
            //            turnLabel.setForeground(Color.darkGray);
            //            turnLabel.setText("O - Turn");
            //        }
    }//GEN-LAST:event_twoPlayerActionPerformed

    private void ButtonFiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonFiveActionPerformed
        if ("".equals(ButtonFive.getText())) {
            if ("X".equals(check)) {
                ButtonFive.setText("X");
                check = "O";
                arr[1][1] = 1;
                counter++;
                this.result();
                if (onePlayer.isSelected() && easy.isSelected()) {
                    this.computerTurn();
                } else if (onePlayer.isSelected() && hard.isSelected()) {
                    this.computerTurnHard();
                }
            } else {
                ButtonFive.setText("O");
                check = "X";
                arr[1][1] = 0;
                counter++;
                this.result();
            }
        }
    }//GEN-LAST:event_ButtonFiveActionPerformed

    private void ButtonSixActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonSixActionPerformed
        if ("".equals(ButtonSix.getText())) {
            if ("X".equals(check)) {
                ButtonSix.setText("X");
                check = "O";
                arr[1][2] = 1;
                counter++;
                this.result();
                if (onePlayer.isSelected() && easy.isSelected()) {
                    this.computerTurn();
                } else if (onePlayer.isSelected() && hard.isSelected()) {
                    this.computerTurnHard();
                }
            } else {
                ButtonSix.setText("O");
                check = "X";
                arr[1][2] = 0;
                counter++;
                this.result();
            }
        }
    }//GEN-LAST:event_ButtonSixActionPerformed

    private void ButtonThreeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonThreeActionPerformed
        if ("".equals(ButtonThree.getText())) {
            if ("X".equals(check)) {
                ButtonThree.setText("X");
                check = "O";
                arr[2][2] = 1;
                counter++;
                this.result();
                if (onePlayer.isSelected() && easy.isSelected()) {
                    this.computerTurn();
                } else if (onePlayer.isSelected() && hard.isSelected()) {
                    this.computerTurnHard();
                }
            } else {
                ButtonThree.setText("O");
                check = "X";
                arr[2][2] = 0;
                counter++;
                this.result();
            }
        }
    }//GEN-LAST:event_ButtonThreeActionPerformed

    private void ButtonTwoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonTwoActionPerformed
        if ("".equals(ButtonTwo.getText())) {
            if ("X".equals(check)) {
                ButtonTwo.setText("X");
                check = "O";
                arr[2][1] = 1;
                counter++;
                this.result();
                if (onePlayer.isSelected() && easy.isSelected()) {
                    this.computerTurn();
                } else if (onePlayer.isSelected() && hard.isSelected()) {
                    this.computerTurnHard();
                }
            } else {
                ButtonTwo.setText("O");
                check = "X";
                arr[2][1] = 0;
                counter++;
                this.result();
            }
        }
    }//GEN-LAST:event_ButtonTwoActionPerformed

    private void ButtonEightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonEightActionPerformed
        if ("".equals(ButtonEight.getText())) {
            if ("X".equals(check)) {
                ButtonEight.setText("X");
                check = "O";
                arr[0][1] = 1;
                counter++;
                this.result();
                if (onePlayer.isSelected() && easy.isSelected()) {
                    this.computerTurn();
                } else if (onePlayer.isSelected() && hard.isSelected()) {
                    this.computerTurnHard();
                }
            } else {
                ButtonEight.setText("O");
                check = "X";
                arr[0][1] = 0;
                counter++;
                this.result();
            }
        }
    }//GEN-LAST:event_ButtonEightActionPerformed

    String check = "X";
    String start = "X";
    int arr[][] = {{-1, -1, -1}, {-1, -1, -1}, {-1, -1, -1}};
    int buttonArr[][] = {{7, 8, 9}, {4, 5, 6}, {1, 2, 3}};
    int counter = 0;
    Random ran = new Random();
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(XOGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(XOGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(XOGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(XOGame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new XOGame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButtonEight;
    private javax.swing.JButton ButtonFive;
    private javax.swing.JButton ButtonFour;
    private javax.swing.JButton ButtonNine;
    private javax.swing.JButton ButtonOne;
    private javax.swing.JButton ButtonReset;
    private javax.swing.JButton ButtonSeven;
    private javax.swing.JButton ButtonSix;
    private javax.swing.JButton ButtonThree;
    private javax.swing.JButton ButtonTwo;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JRadioButton easy;
    private javax.swing.JRadioButton hard;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JRadioButton onePlayer;
    private javax.swing.JLabel turnLabel;
    private javax.swing.JRadioButton twoPlayer;
    // End of variables declaration//GEN-END:variables

    private void reset() {
        ButtonOne.setText("");
        ButtonTwo.setText("");
        ButtonThree.setText("");
        ButtonFour.setText("");
        ButtonFive.setText("");
        ButtonSix.setText("");
        ButtonSeven.setText("");
        ButtonEight.setText("");
        ButtonNine.setText("");
        //check = "X";
        counter = 0;
        for (int i = 0; i < 3; i++) {
            for (int j = 0; j < 3; j++) {
                arr[i][j] = -1;
            }
        }
        if ("X".equals(start)) {
            start = "O";
            check = "O";
        } else {
            start = "X";
            check = "X";
        }
        if (onePlayer.isSelected() && hard.isSelected()) {
            ButtonFive.setText("O");
            check = "X";
            arr[1][1] = 0;
            counter++;
        }
    }

    private void result() {
        if (arr[0][0] == arr[1][1] && arr[1][1] == arr[2][2] || arr[0][2] == arr[1][1] && arr[1][1] == arr[2][0]) {
            if (arr[1][1] == 1) {
                if (onePlayer.isSelected()) {
                    JOptionPane.showMessageDialog(rootPane, "Congratulation You are Won :)");
                } else {
                    JOptionPane.showMessageDialog(rootPane, "Player One is Won :)");
                }
                this.reset();
            } else if (arr[1][1] == 0) {
                if (onePlayer.isSelected()) {
                    JOptionPane.showMessageDialog(rootPane, "You Lost :(");
                } else {
                    JOptionPane.showMessageDialog(rootPane, "Player Two is Won :)");
                }
                this.reset();
            }
        }
        for (int i = 0; i < 3; i++) {
            if ((arr[i][0] == arr[i][1] && arr[i][1] == arr[i][2]) || (arr[0][i] == arr[1][i] && arr[1][i] == arr[2][i])) {
                if (arr[i][i] == 1) {
                    if (onePlayer.isSelected()) {
                        JOptionPane.showMessageDialog(rootPane, "Congratulation You are Won :)");
                    } else {
                        JOptionPane.showMessageDialog(rootPane, "Player One is Won :)");
                    }
                    this.reset();
                } else if (arr[i][i] == 0) {
                    if (onePlayer.isSelected()) {
                        JOptionPane.showMessageDialog(rootPane, "You Lost :(");
                    } else {
                        JOptionPane.showMessageDialog(rootPane, "Player Two is Won :)");
                    }
                    this.reset();
                }
            }
        }
        if (counter == 9) {
            JOptionPane.showMessageDialog(rootPane, "Draw !!!");
            this.reset();
        }
    }

    private void computerTurn() {
        //if ("O".equals(check)) {
        while ("O".equals(check)) {
            int button = 1 + ran.nextInt(9);
            this.turn(button);
        }
        //}
    }

    private void turn(int button) {
        switch (button) {
            case 1:
                if ("".equals(ButtonOne.getText())) {
                    ButtonOne.setText("O");
                    check = "X";
                    arr[2][0] = 0;
                    counter++;
                    this.result();
                    break;
                }
            case 2:
                if ("".equals(ButtonTwo.getText())) {
                    ButtonTwo.setText("O");
                    check = "X";
                    arr[2][1] = 0;
                    counter++;
                    this.result();
                    break;
                }
            case 3:
                if ("".equals(ButtonThree.getText())) {
                    ButtonThree.setText("O");
                    check = "X";
                    arr[2][2] = 0;
                    counter++;
                    this.result();
                    break;
                }
            case 4:
                if ("".equals(ButtonFour.getText())) {
                    ButtonFour.setText("O");
                    check = "X";
                    arr[1][0] = 0;
                    counter++;
                    this.result();
                    break;
                }
            case 5:
                if ("".equals(ButtonFive.getText())) {
                    ButtonFive.setText("O");
                    check = "X";
                    arr[1][1] = 0;
                    counter++;
                    this.result();
                    break;
                }
            case 6:
                if ("".equals(ButtonSix.getText())) {
                    ButtonSix.setText("O");
                    check = "X";
                    arr[1][2] = 0;
                    counter++;
                    this.result();
                    break;
                }
            case 7:
                if ("".equals(ButtonSeven.getText())) {
                    ButtonSeven.setText("O");
                    check = "X";
                    arr[0][0] = 0;
                    counter++;
                    this.result();
                    break;
                }
            case 8:
                if ("".equals(ButtonEight.getText())) {
                    ButtonEight.setText("O");
                    check = "X";
                    arr[0][1] = 0;
                    counter++;
                    this.result();
                    break;
                }
            case 9:
                if ("".equals(ButtonNine.getText())) {
                    ButtonNine.setText("O");
                    check = "X";
                    arr[0][2] = 0;
                    counter++;
                    this.result();
                    break;
                }
        }
    }

    private void computerTurnHard() {
        int r = -1, c = -1, button = -1;
        for (int t = 0; t < 2; t++) {
            for (int i = 0; i < 3; i++) {
                if (arr[i][i] == arr[(i + 1) % 3][(i + 1) % 3]) {
                    r = (i + 2) % 3;
                    c = r;
                    if (arr[r][c] == -1 && arr[i][i] == t) {
                        break;
                    }
                    r = c = -1;
                }
            }
            if (r == -1 && c == -1) {
                for (int i = 0; i < 3; i++) {
                    for (int j = 0; j < 3; j++) {
                        if (arr[i][j] == arr[i][(j + 1) % 3]) {
                            r = i;
                            c = (j + 2) % 3;
                            if (arr[r][c] == -1 && arr[i][j] == t) {
                                break;
                            }
                            r = c = -1;
                        }
                    }
                    if (r != -1 && c != -1) {
                        break;
                    }
                }
            }
            if (r == -1 && c == -1) {
                for (int i = 0; i < 3; i++) {
                    for (int j = 0; j < 3; j++) {
                        if (arr[j][i] == arr[(j + 1) % 3][i]) {
                            r = (j + 2) % 3;
                            c = i;
                            if (arr[r][c] == -1 && arr[j][i] == t) {
                                break;
                            }
                        }
                        r = c = -1;
                    }
                    if (r != -1 && c != -1) {
                        break;
                    }
                }
            }
            if (r != -1 && c != -1) {
                button = buttonArr[r][c];
                this.turn(button);
                break;
            } else if (r == -1 && c == -1 && t == 1) {
                computerTurn();
                break;
            }
        }
    }
}
